{"ast":null,"code":"var _jsxFileName = \"/Users/dillonharris/code/3DPrinterSharing-Web/src/components/BrowsingManager.js\";\nimport React from 'react';\nimport BrowsingNav from './BrowsingNav';\nimport ImageCard from './ImageCard';\nimport '../style/Browsing.css';\nimport { withRouter } from 'react-router-dom';\nimport { urls } from './Main';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport { getMyModels, getMyOffers, getMyJobsInProgress, getMyCompletedPrints, getNewJobs, getMyBids, getCurrentJobs, getPastJobs, refreshJWT, setUser } from '../Backend';\n\nclass BrowsingManger extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNavClick = async navItem => {\n      this.setState({\n        selectedNavItem: navItem\n      }, (await this.gatherModels // callback.. notice it doesn't have the () because we're not executing it, we're passing it in.\n      ));\n    };\n\n    if (!localStorage.authToken) {\n      props.history.push(urls.login);\n    }\n\n    this.modelerNavItems = [{\n      title: 'Models',\n      api: getMyModels\n    }, {\n      title: 'My Offers',\n      api: getMyOffers\n    }, {\n      title: 'Jobs In Progress',\n      api: getMyJobsInProgress\n    }, {\n      title: 'Completed Prints',\n      api: getMyCompletedPrints\n    }];\n    this.vendorNavItems = [{\n      title: 'New Jobs',\n      api: getNewJobs\n    }, {\n      title: 'My Bids',\n      api: getMyBids\n    }, {\n      title: 'Current Jobs',\n      api: getCurrentJobs\n    }, {\n      title: 'Past Jobs',\n      api: getPastJobs\n    }];\n    this.state = {\n      imageCards: [],\n      selectedNavItem: {},\n      navItems: {}\n    };\n  }\n\n  async componentDidMount() {\n    let user = await refreshJWT();\n    setUser(user);\n\n    if (user.is_vendor) {\n      this.setState({\n        selectedNavItem: this.vendorNavItems[0],\n        navItems: this.vendorNavItems\n      }, (await this.gatherModels));\n    } else {\n      this.setState({\n        selectedNavItem: this.modelerNavItems[0],\n        navItems: this.modelerNavItems\n      }, (await this.gatherModels));\n    }\n  }\n\n  async gatherModels() {\n    let modelInfo = await this.state.selectedNavItem.api();\n    let imageCards = [];\n    modelInfo.forEach(model => {\n      imageCards.push( /*#__PURE__*/React.createElement(ImageCard, {\n        selectedNavigation: this.state.selectedNavItem,\n        model: model,\n        key: model.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }\n      }));\n    });\n    this.setState({\n      imageCards: imageCards\n    });\n  }\n\n  render() {\n    if (!this.state.navItems.length) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sweet-loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ClipLoader, {\n        css: `\n                            display: block;\n                            margin: 0 auto;\n                            border-color: #9d19d5;\n                        `,\n        size: 150,\n        color: '#123abc',\n        loading: !this.state.navItems.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      }));\n    } else if (!this.state.imageCards.length) {\n      return /*#__PURE__*/React.createElement(BrowsingNav, {\n        className: \"browsing-nav\",\n        navItems: this.state.navItems,\n        handleClick: this.handleNavClick,\n        selected: this.state.selectedNavItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(BrowsingNav, {\n        className: \"browsing-nav\",\n        navItems: this.state.navItems,\n        handleClick: this.handleNavClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"browsing-grid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, this.state.imageCards));\n    }\n  }\n\n}\n\nexport default withRouter(BrowsingManger);","map":{"version":3,"sources":["/Users/dillonharris/code/3DPrinterSharing-Web/src/components/BrowsingManager.js"],"names":["React","BrowsingNav","ImageCard","withRouter","urls","ClipLoader","getMyModels","getMyOffers","getMyJobsInProgress","getMyCompletedPrints","getNewJobs","getMyBids","getCurrentJobs","getPastJobs","refreshJWT","setUser","BrowsingManger","Component","constructor","props","handleNavClick","navItem","setState","selectedNavItem","gatherModels","localStorage","authToken","history","push","login","modelerNavItems","title","api","vendorNavItems","state","imageCards","navItems","componentDidMount","user","is_vendor","modelInfo","forEach","model","id","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BrowsingNav from './BrowsingNav';\nimport ImageCard from './ImageCard';\nimport '../style/Browsing.css';\nimport {withRouter} from 'react-router-dom';\nimport {urls} from './Main';\nimport ClipLoader from 'react-spinners/ClipLoader';\n\nimport {\n    getMyModels,\n    getMyOffers,\n    getMyJobsInProgress,\n    getMyCompletedPrints,\n    getNewJobs,\n    getMyBids,\n    getCurrentJobs,\n    getPastJobs,\n    refreshJWT,\n    setUser,\n} from '../Backend';\n\nclass BrowsingManger extends React.Component {\n    constructor(props) {\n        super(props);\n        if (!localStorage.authToken) {\n            props.history.push(urls.login);\n        }\n        this.modelerNavItems = [\n            {\n                title: 'Models',\n                api: getMyModels,\n            },\n            {\n                title: 'My Offers',\n                api: getMyOffers,\n            },\n            {\n                title: 'Jobs In Progress',\n                api: getMyJobsInProgress,\n            },\n            {\n                title: 'Completed Prints',\n                api: getMyCompletedPrints,\n            },\n        ];\n\n        this.vendorNavItems = [\n            {\n                title: 'New Jobs',\n                api: getNewJobs,\n            },\n            {\n                title: 'My Bids',\n                api: getMyBids,\n            },\n            {\n                title: 'Current Jobs',\n                api: getCurrentJobs,\n            },\n            {\n                title: 'Past Jobs',\n                api: getPastJobs,\n            },\n        ];\n        this.state = {\n            imageCards: [],\n            selectedNavItem: {},\n            navItems: {},\n        };\n    }\n\n    async componentDidMount() {\n        let user = await refreshJWT();\n        setUser(user);\n        if (user.is_vendor) {\n            this.setState(\n                {\n                    selectedNavItem: this.vendorNavItems[0],\n                    navItems: this.vendorNavItems,\n                },\n                await this.gatherModels,\n            );\n        } else {\n            this.setState(\n                {\n                    selectedNavItem: this.modelerNavItems[0],\n                    navItems: this.modelerNavItems,\n                },\n                await this.gatherModels,\n            );\n        }\n    }\n\n    async gatherModels() {\n        let modelInfo = await this.state.selectedNavItem.api();\n        let imageCards = [];\n        modelInfo.forEach((model) => {\n            imageCards.push(<ImageCard selectedNavigation={this.state.selectedNavItem} model={model} key={model.id} />);\n        });\n        this.setState({imageCards: imageCards});\n    }\n\n    handleNavClick = async (navItem) => {\n        this.setState(\n            {\n                selectedNavItem: navItem,\n            },\n            await this.gatherModels, // callback.. notice it doesn't have the () because we're not executing it, we're passing it in.\n        );\n    };\n\n    render() {\n        if (!this.state.navItems.length) {\n            return (\n                <div className='sweet-loading'>\n                    <ClipLoader\n                        css={`\n                            display: block;\n                            margin: 0 auto;\n                            border-color: #9d19d5;\n                        `}\n                        size={150}\n                        color={'#123abc'}\n                        loading={!this.state.navItems.length}\n                    />\n                </div>\n            );\n        } else if (!this.state.imageCards.length) {\n            return (\n                <BrowsingNav\n                    className='browsing-nav'\n                    navItems={this.state.navItems}\n                    handleClick={this.handleNavClick}\n                    selected={this.state.selectedNavItem}\n                />\n            );\n        } else {\n            return (\n                <div>\n                    <BrowsingNav\n                        className='browsing-nav'\n                        navItems={this.state.navItems}\n                        handleClick={this.handleNavClick}\n                    />\n                    <section className='browsing-grid'>{this.state.imageCards}</section>\n                </div>\n            );\n        }\n    }\n}\nexport default withRouter(BrowsingManger);\n"]},"metadata":{},"sourceType":"module"}