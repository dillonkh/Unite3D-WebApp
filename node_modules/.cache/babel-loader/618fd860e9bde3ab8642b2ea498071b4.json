{"ast":null,"code":"var _jsxFileName = \"/Users/dillonharris/code/3DPrinterSharing-Web/src/components/BrowsingManager.js\";\nimport React from 'react';\nimport BrowsingNav from './BrowsingNav';\nimport ImageCard from './ImageCard';\nimport '../style/Browsing.css';\nimport { withRouter } from 'react-router-dom';\nimport { urls } from './Main';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport { getMyModels, getMyOffers, getMyJobsInProgress, getMyCompletedPrints, getNewJobs, getMyBids, getCurrentJobs, getPastJobs, refreshJWT } from '../Backend';\n\nclass BrowsingManger extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNavClick = async navItem => {\n      this.setState({\n        selectedNavItem: navItem\n      }, (await this.gatherModels // callback.. notice it doesn't have the () because we're not executing it, we're passing it in.\n      ));\n    };\n\n    if (!localStorage.authToken) {\n      props.history.push(urls.login);\n    }\n\n    this.modelerNavItems = [{\n      title: 'Models',\n      api: getMyModels\n    }, {\n      title: 'My Offers',\n      api: getMyOffers\n    }, {\n      title: 'Jobs In Progress',\n      api: getMyJobsInProgress\n    }, {\n      title: 'Completed Prints',\n      api: getMyCompletedPrints\n    }];\n    this.vendorNavItems = [{\n      title: 'New Jobs',\n      api: getNewJobs\n    }, {\n      title: 'My Bids',\n      api: getMyBids\n    }, {\n      title: 'Current Jobs',\n      api: getCurrentJobs\n    }, {\n      title: 'Past Jobs',\n      api: getPastJobs\n    }];\n    console.log('props.iAmModeler: ', props.iAmModeler);\n    this.state = {\n      imageCards: [],\n      selectedNavItem: {},\n      navItems: {}\n    };\n  }\n\n  async componentDidMount() {\n    let user = await refreshJWT();\n    console.log('user: ', user);\n\n    if (user.is_vendor) {\n      // push vendor nav items\n      this.props.pushNavItems(true, []);\n      console.log('setting state to vendorNavItems');\n      this.setState({\n        selectedNavItem: this.vendorNavItems[0],\n        navItems: this.vendorNavItems\n      }, (await this.gatherModels));\n      console.log('settingState is executing');\n    } else {\n      // push modeler nav items\n      this.props.pushNavItems(false, []);\n      console.log('setting state to modelerNavItems');\n      this.setState({\n        selectedNavItem: this.modelerNavItems[0],\n        navItems: this.modelerNavItems\n      }, (await this.gatherModels));\n      console.log('settingState is executing');\n    }\n  }\n\n  async gatherModels() {\n    console.log('inGatherModels');\n    let modelInfo = await this.state.selectedNavItem.api();\n    let imageCards = [];\n    modelInfo.forEach(model => {\n      imageCards.push( /*#__PURE__*/React.createElement(ImageCard, {\n        selectedNavigation: this.state.selectedNavItem,\n        model: model,\n        key: model.printJobID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }));\n    });\n    this.setState({\n      imageCards: imageCards\n    });\n  }\n\n  render() {\n    if (!this.state.navItems.length) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sweet-loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ClipLoader, {\n        css: `\n                            display: block;\n                            margin: 0 auto;\n                            border-color: #9d19d5;\n                        `,\n        size: 150,\n        color: '#123abc',\n        loading: !this.state.navItems.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }));\n    } else if (!this.state.imageCards.length) {\n      console.log('this.state.navItems.length: ', this.state.navItems.length);\n      console.log('this.state.navItems: ', this.state.navItems);\n      return /*#__PURE__*/React.createElement(BrowsingNav, {\n        className: \"browsing-nav\",\n        navItems: this.state.navItems,\n        handleClick: this.handleNavClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(BrowsingNav, {\n        className: \"browsing-nav\",\n        navItems: this.state.navItems,\n        handleClick: this.handleNavClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"browsing-grid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }\n      }, this.state.imageCards));\n    }\n  }\n\n}\n\nexport default withRouter(BrowsingManger);","map":{"version":3,"sources":["/Users/dillonharris/code/3DPrinterSharing-Web/src/components/BrowsingManager.js"],"names":["React","BrowsingNav","ImageCard","withRouter","urls","ClipLoader","getMyModels","getMyOffers","getMyJobsInProgress","getMyCompletedPrints","getNewJobs","getMyBids","getCurrentJobs","getPastJobs","refreshJWT","BrowsingManger","Component","constructor","props","handleNavClick","navItem","setState","selectedNavItem","gatherModels","localStorage","authToken","history","push","login","modelerNavItems","title","api","vendorNavItems","console","log","iAmModeler","state","imageCards","navItems","componentDidMount","user","is_vendor","pushNavItems","modelInfo","forEach","model","printJobID","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BrowsingNav from './BrowsingNav';\nimport ImageCard from './ImageCard';\nimport '../style/Browsing.css';\nimport {withRouter} from 'react-router-dom';\nimport {urls} from './Main';\nimport ClipLoader from 'react-spinners/ClipLoader';\n\nimport {\n    getMyModels,\n    getMyOffers,\n    getMyJobsInProgress,\n    getMyCompletedPrints,\n    getNewJobs,\n    getMyBids,\n    getCurrentJobs,\n    getPastJobs,\n    refreshJWT,\n} from '../Backend';\n\nclass BrowsingManger extends React.Component {\n    constructor(props) {\n        super(props);\n        if (!localStorage.authToken) {\n            props.history.push(urls.login);\n        }\n        this.modelerNavItems = [\n            {\n                title: 'Models',\n                api: getMyModels,\n            },\n            {\n                title: 'My Offers',\n                api: getMyOffers,\n            },\n            {\n                title: 'Jobs In Progress',\n                api: getMyJobsInProgress,\n            },\n            {\n                title: 'Completed Prints',\n                api: getMyCompletedPrints,\n            },\n        ];\n\n        this.vendorNavItems = [\n            {\n                title: 'New Jobs',\n                api: getNewJobs,\n            },\n            {\n                title: 'My Bids',\n                api: getMyBids,\n            },\n            {\n                title: 'Current Jobs',\n                api: getCurrentJobs,\n            },\n            {\n                title: 'Past Jobs',\n                api: getPastJobs,\n            },\n        ];\n\n        console.log('props.iAmModeler: ', props.iAmModeler);\n\n        this.state = {\n            imageCards: [],\n            selectedNavItem: {},\n            navItems: {},\n        };\n    }\n\n    async componentDidMount() {\n        let user = await refreshJWT();\n        console.log('user: ', user);\n        if (user.is_vendor) {\n            // push vendor nav items\n            this.props.pushNavItems(true, []);\n            console.log('setting state to vendorNavItems');\n            this.setState(\n                {\n                    selectedNavItem: this.vendorNavItems[0],\n                    navItems: this.vendorNavItems,\n                },\n                await this.gatherModels,\n            );\n            console.log('settingState is executing');\n        } else {\n            // push modeler nav items\n            this.props.pushNavItems(false, []);\n            console.log('setting state to modelerNavItems');\n            this.setState(\n                {\n                    selectedNavItem: this.modelerNavItems[0],\n                    navItems: this.modelerNavItems,\n                },\n                await this.gatherModels,\n            );\n            console.log('settingState is executing');\n        }\n    }\n\n    async gatherModels() {\n        console.log('inGatherModels');\n        let modelInfo = await this.state.selectedNavItem.api();\n        let imageCards = [];\n        modelInfo.forEach((model) => {\n            imageCards.push(\n                <ImageCard selectedNavigation={this.state.selectedNavItem} model={model} key={model.printJobID} />,\n            );\n        });\n        this.setState({imageCards: imageCards});\n    }\n\n    handleNavClick = async (navItem) => {\n        this.setState(\n            {\n                selectedNavItem: navItem,\n            },\n            await this.gatherModels, // callback.. notice it doesn't have the () because we're not executing it, we're passing it in.\n        );\n    };\n\n    render() {\n        if (!this.state.navItems.length) {\n            return (\n                <div className='sweet-loading'>\n                    <ClipLoader\n                        css={`\n                            display: block;\n                            margin: 0 auto;\n                            border-color: #9d19d5;\n                        `}\n                        size={150}\n                        color={'#123abc'}\n                        loading={!this.state.navItems.length}\n                    />\n                </div>\n            );\n        } else if (!this.state.imageCards.length) {\n            console.log('this.state.navItems.length: ', this.state.navItems.length);\n            console.log('this.state.navItems: ', this.state.navItems);\n            return (\n                <BrowsingNav\n                    className='browsing-nav'\n                    navItems={this.state.navItems}\n                    handleClick={this.handleNavClick}\n                />\n            );\n        } else {\n            return (\n                <div>\n                    <BrowsingNav\n                        className='browsing-nav'\n                        navItems={this.state.navItems}\n                        handleClick={this.handleNavClick}\n                    />\n                    <section className='browsing-grid'>{this.state.imageCards}</section>\n                </div>\n            );\n        }\n    }\n}\nexport default withRouter(BrowsingManger);\n"]},"metadata":{},"sourceType":"module"}