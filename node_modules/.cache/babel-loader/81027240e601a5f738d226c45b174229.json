{"ast":null,"code":"import AWS from 'aws-sdk';\nimport uuid4 from 'uuid';\n/**\n * uploadFile\n *\n * Upload a file of any kind to our S3 bucket\n *\n * @param {File object} file - get from onChange event of input tag `e.target.files[0]`\n * @param {boolean} isImage\n * @param {(number, number) => {}} callback - void function. This will be called below when upload progress is made.\n *      It provides 2 numbers\n *          loaded: total bytes uploaded so far\n *          total: total bytes to be uploaded.\n *      percentage = (loaded / total) * 100\n *      Suggested use: some sort of progress bar component where the callback sets the amount filled\n *          to indicate progress to the user\n *\n * @returns public URL for uploaded file\n *      It will return the URL before Uploading is finished. I couldn't get the asynchronous\n *      stuff to work for the S3.upload() function. The callback is how we track the upload progress\n */\n\nconst uploadFile = (file, isImage, callback) => {\n  const S3 = new AWS.S3({\n    accessKeyId: process.env.REACT_APP_AWS_ID,\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET,\n    region: process.env.REACT_APP_AWS_S3_REGION\n  });\n  const extension = file.name.substring(file.name.lastIndexOf('.')); // Generate unique name using UUID4\n\n  const fileName = `${isImage ? 'images/' : 'models/'}${uuid4()}${extension}`;\n  const params = {\n    Bucket: process.env.REACT_APP_AWS_S3_BUCKET_NAME,\n    Key: fileName,\n    Body: file,\n    ACL: 'public-read',\n    ContentType: file.type\n  };\n  S3.upload(params).on('httpUploadProgress', evt => {\n    callback(evt.loaded, evt.total);\n  }).send(err => {\n    if (err) {\n      throw err;\n    }\n  });\n  return `https://unite3d.s3-us-west-2.amazonaws.com/${fileName}`;\n};\n\nexport default uploadFile;","map":{"version":3,"sources":["/Users/dillonharris/code/3DPrinterSharing-Web/src/components/utilities/S3Uploader.js"],"names":["AWS","uuid4","uploadFile","file","isImage","callback","S3","accessKeyId","process","env","REACT_APP_AWS_ID","secretAccessKey","REACT_APP_AWS_SECRET","region","REACT_APP_AWS_S3_REGION","extension","name","substring","lastIndexOf","fileName","params","Bucket","REACT_APP_AWS_S3_BUCKET_NAME","Key","Body","ACL","ContentType","type","upload","on","evt","loaded","total","send","err"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB;AACA,OAAOC,KAAP,MAAkB,MAAlB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,KAA6B;AAC5C,QAAMC,EAAE,GAAG,IAAIN,GAAG,CAACM,EAAR,CAAW;AAClBC,IAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAElBC,IAAAA,eAAe,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGlBC,IAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHF,GAAX,CAAX;AAKA,QAAMC,SAAS,GAAGZ,IAAI,CAACa,IAAL,CAAUC,SAAV,CAAoBd,IAAI,CAACa,IAAL,CAAUE,WAAV,CAAsB,GAAtB,CAApB,CAAlB,CAN4C,CAQ5C;;AACA,QAAMC,QAAQ,GAAI,GAAEf,OAAO,GAAG,SAAH,GAAe,SAAU,GAAEH,KAAK,EAAG,GAAEc,SAAU,EAA1E;AACA,QAAMK,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAEb,OAAO,CAACC,GAAR,CAAYa,4BADT;AAEXC,IAAAA,GAAG,EAAEJ,QAFM;AAGXK,IAAAA,IAAI,EAAErB,IAHK;AAIXsB,IAAAA,GAAG,EAAE,aAJM;AAKXC,IAAAA,WAAW,EAAEvB,IAAI,CAACwB;AALP,GAAf;AAQArB,EAAAA,EAAE,CAACsB,MAAH,CAAUR,MAAV,EACKS,EADL,CACQ,oBADR,EAC+BC,GAAD,IAAS;AAC/BzB,IAAAA,QAAQ,CAACyB,GAAG,CAACC,MAAL,EAAaD,GAAG,CAACE,KAAjB,CAAR;AACH,GAHL,EAIKC,IAJL,CAIWC,GAAD,IAAS;AACX,QAAIA,GAAJ,EAAS;AACL,YAAMA,GAAN;AACH;AACJ,GARL;AAUA,SAAQ,8CAA6Cf,QAAS,EAA9D;AACH,CA7BD;;AA+BA,eAAejB,UAAf","sourcesContent":["import AWS from 'aws-sdk';\nimport uuid4 from 'uuid';\n\n/**\n * uploadFile\n *\n * Upload a file of any kind to our S3 bucket\n *\n * @param {File object} file - get from onChange event of input tag `e.target.files[0]`\n * @param {boolean} isImage\n * @param {(number, number) => {}} callback - void function. This will be called below when upload progress is made.\n *      It provides 2 numbers\n *          loaded: total bytes uploaded so far\n *          total: total bytes to be uploaded.\n *      percentage = (loaded / total) * 100\n *      Suggested use: some sort of progress bar component where the callback sets the amount filled\n *          to indicate progress to the user\n *\n * @returns public URL for uploaded file\n *      It will return the URL before Uploading is finished. I couldn't get the asynchronous\n *      stuff to work for the S3.upload() function. The callback is how we track the upload progress\n */\nconst uploadFile = (file, isImage, callback) => {\n    const S3 = new AWS.S3({\n        accessKeyId: process.env.REACT_APP_AWS_ID,\n        secretAccessKey: process.env.REACT_APP_AWS_SECRET,\n        region: process.env.REACT_APP_AWS_S3_REGION,\n    });\n    const extension = file.name.substring(file.name.lastIndexOf('.'));\n\n    // Generate unique name using UUID4\n    const fileName = `${isImage ? 'images/' : 'models/'}${uuid4()}${extension}`;\n    const params = {\n        Bucket: process.env.REACT_APP_AWS_S3_BUCKET_NAME,\n        Key: fileName,\n        Body: file,\n        ACL: 'public-read',\n        ContentType: file.type,\n    };\n\n    S3.upload(params)\n        .on('httpUploadProgress', (evt) => {\n            callback(evt.loaded, evt.total);\n        })\n        .send((err) => {\n            if (err) {\n                throw err;\n            }\n        });\n\n    return `https://unite3d.s3-us-west-2.amazonaws.com/${fileName}`;\n};\n\nexport default uploadFile;\n"]},"metadata":{},"sourceType":"module"}